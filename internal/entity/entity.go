package entity

import (
	"fmt"
	"time"
)

type State string

const (
	PetAlive    State = "alive"
	PetDead     State = "dead"
	PetSleeping State = "sleeping"
)

// UIConfig –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è UI.
type UIConfig struct {
	CriticalThreshold int `json:"criticalThreshold"` // 20
	WarningThreshold  int `json:"warningThreshold"`  // 40
	GoodThreshold     int `json:"goodThreshold"`     // 60
}

// PetStatus –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞.
type PetStatus struct {
	AverageStats     int    `json:"averageStats"`
	IsCritical       bool   `json:"isCritical"`
	IsWarning        bool   `json:"isWarning"`
	StatusMessage    string `json:"statusMessage"`
	StatusType       string `json:"statusType"` // "good", "warning", "danger"
	CanPerformAction bool   `json:"canPerformAction"`
}

// AvailableActions –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö.
type AvailableActions struct {
	CanFeed   bool `json:"canFeed"`
	CanPlay   bool `json:"canPlay"`
	CanClean  bool `json:"canClean"`
	CanHeal   bool `json:"canHeal"`
	CanSleep  bool `json:"canSleep"`
	CanWakeUp bool `json:"canWakeUp"`
}

type Pet struct {
	Name             string           `json:"name"`
	Health           int              `json:"health"`
	Hunger           int              `json:"hunger"`
	Happiness        int              `json:"happiness"`
	Energy           int              `json:"energy"`
	Hygiene          int              `json:"hygiene"`
	State            State            `json:"state"`
	SleepStartTime   time.Time        `json:"sleepStartTime"`
	Config           PetConfig        `json:"config"`
	LastUpdated      time.Time        `json:"lastUpdated"`
	Age              int              `json:"age"`
	Avatar           Avatar           `json:"avatar"`
	Status           PetStatus        `json:"status"`
	AvailableActions AvailableActions `json:"availableActions"`
	UIConfig         UIConfig         `json:"uiConfig"`
}

type PetConfig struct {
	HungerDecayRate    int
	EnergyDecayRate    int
	HygieneDecayRate   int
	HappinessDecayRate int
}

// UpdateStatus –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞.
func (pet *Pet) UpdateStatus() {
	// –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—ã
	avg := (pet.Hunger + pet.Happiness + pet.Hygiene + pet.Health + pet.Energy) / 5
	pet.Status.AverageStats = avg

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	pet.Status.IsCritical = avg <= 20 || pet.Health <= 20
	pet.Status.IsWarning = avg <= 40 || pet.Health <= 40

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
	pet.Status.CanPerformAction = pet.State != PetDead

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	pet.generateStatusMessage()

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
	pet.updateAvailableActions()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	pet.UIConfig = UIConfig{
		CriticalThreshold: 20,
		WarningThreshold:  40,
		GoodThreshold:     60,
	}
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
func (pet *Pet) generateStatusMessage() {
	switch pet.State {
	case PetDead:
		pet.Status.StatusMessage = "üíÄ –ü–∏—Ç–æ–º–µ—Ü —É–º–µ—Ä... –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ!"
		pet.Status.StatusType = "danger"
	case PetSleeping:
		pet.Status.StatusMessage = "üí§ –ü–∏—Ç–æ–º–µ—Ü —Å–ø–∏—Ç..."
		pet.Status.StatusType = "good"
	default:
		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –∑–¥–æ—Ä–æ–≤—å—è –∏ —Å—Ç–∞—Ç–∞–º
		if pet.Health <= 20 {
			pet.Status.StatusMessage = "ü§í –ü–∏—Ç–æ–º–µ—Ü –±–æ–ª–µ–Ω!"
			pet.Status.StatusType = "danger"
		} else if pet.Energy <= 20 {
			pet.Status.StatusMessage = "üò¥ –ü–∏—Ç–æ–º–µ—Ü —É—Å—Ç–∞–ª!"
			pet.Status.StatusType = "warning"
		} else if pet.Status.AverageStats <= 30 {
			pet.Status.StatusMessage = "üòø –ü–∏—Ç–æ–º—Ü—É –≥—Ä—É—Å—Ç–Ω–æ..."
			pet.Status.StatusType = "warning"
		} else if pet.Status.AverageStats >= 80 {
			pet.Status.StatusMessage = "üò∏ –ü–∏—Ç–æ–º–µ—Ü —Å—á–∞—Å—Ç–ª–∏–≤!"
			pet.Status.StatusType = "good"
		} else {
			pet.Status.StatusMessage = "üòä –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ"
			pet.Status.StatusType = "good"
		}
	}
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
func (pet *Pet) updateAvailableActions() {
	isDead := pet.State == PetDead
	isSleeping := pet.State == PetSleeping

	pet.AvailableActions = AvailableActions{
		CanFeed:   !isDead && !isSleeping && pet.Hunger < 100,
		CanPlay:   !isDead && !isSleeping && pet.Energy > 20 && pet.Happiness < 100,
		CanClean:  !isDead && !isSleeping && pet.Hygiene < 100,
		CanHeal:   !isDead && !isSleeping && pet.Health < 100,
		CanSleep:  !isDead && !isSleeping && pet.Energy <= 30,
		CanWakeUp: !isDead && isSleeping,
	}
}

func (pet *Pet) GetAvatar(baseURL string) {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	if pet.State == PetDead {
		pet.Avatar = Avatar{
			Image: baseURL + "/dead.png",
			Emoji: "üíÄ",
			Mood:  "üíÄ",
		}

		return
	}

	if pet.State == PetSleeping {
		pet.Avatar = Avatar{
			Image: baseURL + "/sleeping.png",
			Emoji: "üò¥",
			Mood:  "üí§",
		}

		return
	}

	// –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º —Å—Ç–∞—Ç–∞–º
	avg := (pet.Hunger + pet.Happiness + pet.Hygiene + pet.Health + pet.Energy) / 5

	var img, emoji, moodEmoji string

	if pet.Health <= 20 {
		img = baseURL + "/sick.png"
		emoji = "ü§í"
		moodEmoji = "ü§í"
	} else if pet.Energy <= 20 {
		img = baseURL + "/tired.png"
		emoji = "üò¥"
		moodEmoji = "üò¥"
	} else if avg >= 80 {
		img = baseURL + "/happy.png"
		emoji = "üò∏"
		moodEmoji = "üò∏"
	} else if avg >= 60 {
		img = baseURL + "/default.png"
		emoji = "üê±"
		moodEmoji = "üòä"
	} else if avg >= 40 {
		img = baseURL + "/default.png"
		emoji = "üê±"
		moodEmoji = "üòê"
	} else {
		img = baseURL + "/sad.png"
		emoji = "üôÄ"
		moodEmoji = "üòø"
	}

	pet.Avatar = Avatar{
		Image: img,
		Emoji: emoji,
		Mood:  moodEmoji,
	}

	pet.UpdateStatus()
}

// CanPerformAction –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.
func (pet *Pet) CanPerformAction(action string) (bool, string) {
	if pet.State == PetDead {
		return false, "–ü–∏—Ç–æ–º–µ—Ü –º–µ—Ä—Ç–≤"
	}

	switch action {
	case "feed":
		if pet.State == PetSleeping {
			return false, "–ü–∏—Ç–æ–º–µ—Ü —Å–ø–∏—Ç"
		}
		if pet.Hunger >= 100 {
			return false, "–ü–∏—Ç–æ–º–µ—Ü –Ω–µ –≥–æ–ª–æ–¥–µ–Ω"
		}

		return true, ""

	case "play":
		if pet.State == PetSleeping {
			return false, "–ü–∏—Ç–æ–º–µ—Ü —Å–ø–∏—Ç"
		}
		if pet.Energy <= 20 {
			return false, "–ü–∏—Ç–æ–º–µ—Ü —Å–ª–∏—à–∫–æ–º —É—Å—Ç–∞–ª"
		}
		if pet.Happiness >= 100 {
			return false, "–ü–∏—Ç–æ–º–µ—Ü —É–∂–µ —Å—á–∞—Å—Ç–ª–∏–≤"
		}
		return true, ""

	case "clean":
		if pet.State == PetSleeping {
			return false, "–ü–∏—Ç–æ–º–µ—Ü —Å–ø–∏—Ç"
		}
		if pet.Hygiene >= 100 {
			return false, "–ü–∏—Ç–æ–º–µ—Ü —É–∂–µ —á–∏—Å—Ç—ã–π"
		}
		return true, ""

	case "heal":
		if pet.State == PetSleeping {
			return false, "–ü–∏—Ç–æ–º–µ—Ü —Å–ø–∏—Ç"
		}
		if pet.Health >= 100 {
			return false, "–ü–∏—Ç–æ–º–µ—Ü –∑–¥–æ—Ä–æ–≤"
		}
		return true, ""

	case "sleep":
		if pet.State == PetSleeping {
			return false, "–ü–∏—Ç–æ–º–µ—Ü —É–∂–µ —Å–ø–∏—Ç"
		}
		if pet.Energy > 30 {
			return false, "–ü–∏—Ç–æ–º–µ—Ü –Ω–µ —É—Å—Ç–∞–ª"
		}
		return true, ""

	case "wakeup":
		if pet.State != PetSleeping {
			return false, "–ü–∏—Ç–æ–º–µ—Ü –Ω–µ —Å–ø–∏—Ç"
		}
		return true, ""

	default:
		return false, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
	}
}

// PetActionResult –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è.
type PetActionResult struct {
	Pet            *Pet   `json:"pet"`
	Result         Result `json:"result"`
	Avatar         Avatar `json:"avatar"`
	ActionFeedback string `json:"actionFeedback"` // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
}

func (r *PetActionResult) GetAvatar(baseURL string) {
	if r.Pet == nil {
		return
	}
	r.Pet.GetAvatar(baseURL)
	r.Avatar = r.Pet.Avatar
}

// GenerateActionFeedback –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è.
func (r *PetActionResult) GenerateActionFeedback(action string) {
	actionNames := map[string]string{
		"feed":   "–ø–æ–∫–æ—Ä–º–∏–ª–∏",
		"play":   "–ø–æ–∏–≥—Ä–∞–ª–∏",
		"clean":  "–ø–æ–º—ã–ª–∏",
		"heal":   "–≤—ã–ª–µ—á–∏–ª–∏",
		"sleep":  "—É–ª–æ–∂–∏–ª–∏ —Å–ø–∞—Ç—å",
		"wakeup": "—Ä–∞–∑–±—É–¥–∏–ª–∏",
	}

	name := actionNames[action]
	if name == "" {
		name = action
	}

	if r.Result.Success {
		r.ActionFeedback = fmt.Sprintf("üéâ –£—Å–ø–µ—à–Ω–æ %s!", name)
	} else {
		r.ActionFeedback = fmt.Sprintf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å %s", name)
	}
}

// Messages –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.
type Messages struct {
	PetDead       string `json:"petDead"`
	PetSleeping   string `json:"petSleeping"`
	PetSick       string `json:"petSick"`
	PetTired      string `json:"petTired"`
	PetSad        string `json:"petSad"`
	PetHappy      string `json:"petHappy"`
	PetOk         string `json:"petOk"`
	NoInitData    string `json:"noInitData"`
	PetNotFound   string `json:"petNotFound"`
	CreateSuccess string `json:"createSuccess"`
}

func GetMessages(lang string) Messages {
	// –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	switch lang {
	case "en":
		return Messages{
			PetDead:       "üíÄ Pet is dead... Create a new one!",
			PetSleeping:   "üí§ Pet is sleeping...",
			PetSick:       "ü§í Pet is sick!",
			PetTired:      "üò¥ Pet is tired!",
			PetSad:        "üòø Pet is sad...",
			PetHappy:      "üò∏ Pet is happy!",
			PetOk:         "üòä Everything is fine",
			NoInitData:    "No initData",
			PetNotFound:   "Pet not found",
			CreateSuccess: "üéâ Congratulations! Pet %s created!",
		}
	default: // ru
		return Messages{
			PetDead:       "üíÄ –ü–∏—Ç–æ–º–µ—Ü —É–º–µ—Ä... –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ!",
			PetSleeping:   "üí§ –ü–∏—Ç–æ–º–µ—Ü —Å–ø–∏—Ç...",
			PetSick:       "ü§í –ü–∏—Ç–æ–º–µ—Ü –±–æ–ª–µ–Ω!",
			PetTired:      "üò¥ –ü–∏—Ç–æ–º–µ—Ü —É—Å—Ç–∞–ª!",
			PetSad:        "üòø –ü–∏—Ç–æ–º—Ü—É –≥—Ä—É—Å—Ç–Ω–æ...",
			PetHappy:      "üò∏ –ü–∏—Ç–æ–º–µ—Ü —Å—á–∞—Å—Ç–ª–∏–≤!",
			PetOk:         "üòä –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ",
			NoInitData:    "–ù–µ—Ç initData",
			PetNotFound:   "–ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω",
			CreateSuccess: "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–∏—Ç–æ–º–µ—Ü %s —Å–æ–∑–¥–∞–Ω!",
		}
	}
}

type Result struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
}

type Avatar struct {
	Image string `json:"image"`
	Emoji string `json:"emoji"` // –û—Å–Ω–æ–≤–Ω–æ–π —ç–º–æ–¥–∑–∏ –∞–≤–∞—Ç–∞—Ä–∞
	Mood  string `json:"mood"`
}
